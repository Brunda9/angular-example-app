pipeline {
    agent {
        node {
            label 'DockerIO-4'
        }
    }

    tools {
        nodejs 'Nodejs'
    }

    stages {
        stage('Workspace cleanup') {
            steps {
                cleanWs()
            }
        }

        stage('Clone') {
            steps {
                script {
                    try {
                        checkout scmGit(branches: [[name: '*/master']], browser: github('https://github.com/Brunda9/angular-example-app'), extensions: [], userRemoteConfigs: [[credentialsId: 'Brunda_github_new_token', url: 'https://github.com/Brunda9/angular-example-app']])
                    } catch (Exception e) {
                        echo "Clone failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        exit 1  // Stop the pipeline
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        sh '''
                            export PATH="/opt/tools/node-v18.14.2/bin:$PATH"
                            npm install
                        '''
                    } catch (Exception e) {
                        echo "Build failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        exit 1  // Stop the pipeline
                    }
                }
            }
        }
    }
}

